<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:lang="http://www.springframework.org/schema/lang"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:websocket="http://www.springframework.org/schema/websocket"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xsi:schemaLocation="http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket-4.3.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.3.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.3.xsd">

	<!--
	<import resource="classpath*:agfw/core/spring/agfw-core-context.xml"/>
	<import resource="classpath*:agfw/core/spring/tx-context.xml"/>
	 -->
	
	<!-- query for postgresql context -->
	<import resource="classpath*:castanets/spring/query-postgresql-context.xml" />
	
	<!-- karajan context -->
	<import resource="classpath*:karajan/spring/karajan-context.xml"/>
	
	<context:component-scan base-package="castanets">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
	
	<!-- h2db -->
	<!-- <jdbc:embedded-database id="dataSourceSystem" type="H2">
	    <jdbc:script location="classpath*:castanets/sqlmap/castanets/system/*.sql" />
	</jdbc:embedded-database> -->
	<jdbc:initialize-database data-source="dataSourceSystem" ignore-failures="ALL">
	    <jdbc:script location="classpath*:castanets/sqlmap/castanets/system/*.sql" />
	</jdbc:initialize-database>
	
	<bean id="systemJdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<constructor-arg ref="dataSourceSystem" />
    </bean>

	<!-- jdbcTemplate -->
	<bean id="castanetsJdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<constructor-arg ref="dataSource" />
	</bean>

	<!-- user connection service -->
	<bean id="securityConnectionService" class="com.itinfo.security.SecurityConnectionService">
	</bean>
	
	<!-- admin connection service -->
	<bean id="adminConnectionService" class="com.itinfo.engine.AdminConnectionService">
	</bean>
	
	<!-- karajan service -->
	<bean id="karajanService" class="com.itinfo.engine.KarajanService" />
	
	<!-- workload prediction service -->
	<bean id="workloadPredictionService" class="com.itinfo.engine.WorkloadPredictionService" p:jdbcTemplate-ref="castanetsJdbcTemplate">
		<constructor-arg>
			<ref bean="queryGetVmWorkload" />
		</constructor-arg>
	</bean>
	
	 <!-- websocket with sockjs -->
	 <websocket:message-broker application-destination-prefix="/cbase">
        <websocket:stomp-endpoint path="/websocket/karajan" >
            <websocket:sockjs/>
        </websocket:stomp-endpoint>
        <websocket:simple-broker prefix="/topic, /queue"/>
    </websocket:message-broker>
    
	<!-- task executor -->
	<task:executor id="karajanTaskExecutor" pool-size="10"/>
	<task:annotation-driven executor="karajanTaskExecutor"/>
</beans>